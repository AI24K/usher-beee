-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.wallets
(
    address text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    user_id uuid,
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    CONSTRAINT wallets_pkey PRIMARY KEY (id),
    CONSTRAINT wallets_id_key UNIQUE (id),
    CONSTRAINT wallets_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.wallets
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.wallets
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.wallets TO anon;

GRANT ALL ON TABLE public.wallets TO authenticated;

GRANT ALL ON TABLE public.wallets TO postgres;

GRANT ALL ON TABLE public.wallets TO service_role;

GRANT ALL ON TABLE public.wallets TO supabase_admin;

COMMENT ON COLUMN public.wallets.id
    IS 'Unique ID associated to the Provider/Address combination';
CREATE POLICY "Enable full access for users based on user_id"
    ON public.wallets
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id));

CREATE TABLE IF NOT EXISTS public.invite_links
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone DEFAULT now(),
    wallet_id uuid,
    active boolean DEFAULT true,
    destination_url character varying COLLATE pg_catalog."default",
    CONSTRAINT invite_links_pkey PRIMARY KEY (id),
    CONSTRAINT invite_links_wallet_id_fkey FOREIGN KEY (wallet_id)
        REFERENCES public.wallets (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.invite_links
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.invite_links
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.invite_links TO anon;

GRANT ALL ON TABLE public.invite_links TO authenticated;

GRANT ALL ON TABLE public.invite_links TO postgres;

GRANT ALL ON TABLE public.invite_links TO service_role;

GRANT ALL ON TABLE public.invite_links TO supabase_admin;

COMMENT ON COLUMN public.invite_links.destination_url
    IS 'Link that is redirected to from this Invite Link';

CREATE TABLE IF NOT EXISTS public.conversions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone DEFAULT now(),
    is_complete boolean DEFAULT false,
    is_bundled boolean DEFAULT false,
    native_id character varying COLLATE pg_catalog."default",
    contract_address character varying COLLATE pg_catalog."default",
    properties json,
    invite_link_id uuid,
    CONSTRAINT conversions_pkey1 PRIMARY KEY (id),
    CONSTRAINT conversions_invite_link_id_fkey FOREIGN KEY (invite_link_id)
        REFERENCES public.invite_links (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.conversions
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.conversions
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.conversions TO anon;

GRANT ALL ON TABLE public.conversions TO authenticated;

GRANT ALL ON TABLE public.conversions TO postgres;

GRANT ALL ON TABLE public.conversions TO service_role;

GRANT ALL ON TABLE public.conversions TO supabase_admin;

CREATE TABLE IF NOT EXISTS public.invites
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp without time zone DEFAULT now(),
    wallet_id uuid,
    user_id uuid,
    provider_code character varying COLLATE pg_catalog."default",
    CONSTRAINT invitees_pkey PRIMARY KEY (id),
    CONSTRAINT invitees_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT invitees_wallet_id_fkey FOREIGN KEY (wallet_id)
        REFERENCES public.wallets (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.invites
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.invites
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.invites TO anon;

GRANT ALL ON TABLE public.invites TO authenticated;

GRANT ALL ON TABLE public.invites TO postgres;

GRANT ALL ON TABLE public.invites TO service_role;

GRANT ALL ON TABLE public.invites TO supabase_admin;

COMMENT ON TABLE public.invites
    IS 'Records of Invitees and their associated Wallet/Usher';
