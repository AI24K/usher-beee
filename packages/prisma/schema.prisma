generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model AffiliateRelations {
// 	id         BigInt       @id @default(autoincrement())
// 	affiliate_id String @db.Uuid
// 	parent_affiliate_id String @db.Uuid
// 	affiliates Affiliates[] @relation(fields: [affiliate_id, parent_affiliate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model Affiliates {
//   id             String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   created_at     DateTime?               @default(now()) @db.Timestamptz(6)
//   active         Boolean?                @default(true)
//   profiles       Profiles[]
//   wallets        Wallets[]
//   partnerships   Partnerships[]
//   captchaEntries UserCaptchaLogEntries[]
//   // human_id       BigInt?
//   // humans         Humans?                 @relation(fields: [human_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model Partnerships {
//   id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   created_at      DateTime?    @default(now()) @db.Timestamptz(6)
//   active          Boolean?     @default(true)
//   destination_url String?      @db.VarChar
//   campaign_id     BigInt?
//   referrals       Referrals[]
//   affiliates      Affiliates[]
//   campaigns       Campaigns?   @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model Campaigns {
//   id           BigInt         @id @default(autoincrement())
//   created_at   DateTime?      @default(now()) @db.Timestamptz(6)
//   campaign_id  String?        @db.VarChar
//   network      String?        @db.VarChar
//   partnerships Partnerships[]
// }

// model Conversions {
//   id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   created_at  DateTime?  @default(now()) @db.Timestamptz(6)
//   native_id   String?    @db.VarChar
//   properties  Json?      @db.Json
//   referral_id String?    @db.Uuid
//   referrals   Referrals? @relation(fields: [referral_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model Referrals {
//   id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   created_at     DateTime?     @default(now()) @db.Timestamptz(6)
//   partnership_id String?       @db.Uuid
//   conversions    Conversions[]
//   partnerships   Partnerships? @relation(fields: [partnership_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model Wallets {
//   id           BigInt      @id @default(autoincrement())
//   created_at   DateTime?   @default(now()) @db.Timestamp(6)
//   address      String
//   affiliate_id String?     @db.Uuid
//   active       Boolean?    @default(true)
//   affiliates   Affiliates? @relation(fields: [affiliate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

model CaptchaLogEntries {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  token      String?   @db.VarChar
  is_success Boolean?
  response   Json?     @db.Json
  profile_id String?   @db.Uuid
  profiles   Profiles? @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profiles {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  user_id             String              @db.Uuid @unique
  captcha_log_entries CaptchaLogEntries[]
}
